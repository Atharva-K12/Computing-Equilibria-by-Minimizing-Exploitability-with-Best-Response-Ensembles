import torch

class MatchingPennies:
    def __init__(self, n_players):
        self.n_players = n_players
        self.action_space = [0, 1]
        
    #payoff defined as u(a)i = [ai = ai+1] for i < n and [an != a1] for i = n,
    #where [Â·] denotes the Iverson bracket, which is 1 if its argument is true and 0 otherwise
    #a is tensor of actions
    def payoff(self, a):
        payoffs = torch.zeros(self.n_players)
        for i in range(self.n_players):
            payoffs[i] = (a[i] == a[(i+1)%self.n_players]).float()
        payoffs[self.n_players-1] = (a[self.n_players-1] != a[0]).float()
        return payoffs
    
class Util:
    def mix(a,epsilon):
        return (1-epsilon)*a.max() + epsilon*a.sum()


class BRE:
    def __init__(self, n_players, learning_rate=0.1):
        self.n_players = n_players
        self.matching_pennies = MatchingPennies(n_players)
        self.strategy = torch.ones(self.n_players, len(self.matching_pennies.action_space), requires_grad=True)
        self.optimizer = torch.optim.SGD([self.strategy], lr=learning_rate)
        self.probs = None
    
    def _get_action(self, player):
        self.probs = torch.softmax(self.strategy[player], dim=-1)
        action = torch.multinomial(self.probs, 1)
        print("action: ", action)
        return action.item()
    
    def train(self, num_iterations):
        for iteration in range(num_iterations):
            actions = [self._get_action(player) for player in range(self.n_players)]
            print("actions: ", actions)
            payoffs = self.matching_pennies.payoff(torch.tensor(actions))#,requires_grad=True))
            print("payoffs: ", payoffs)
            self.optimizer.zero_grad()
            loss = -payoffs
            loss.backward()
            self.optimizer.step()
            print("strategy: ", self.strategy)
            print("probs: ", self.probs)
            print("loss: ", loss)
            print("payoffs: ", payoffs)


    
    def get_strategy(self):
        return self.strategy
    

if __name__ == "__main__":
    bre = BRE(6)
    exploitability = bre.train(100)
    print("exploitability: ", exploitability)
    print("strategy: ", bre.get_strategy())


