from typing import Callable
from dataclasses import dataclass
from functools import partial
from operator import neg
from jax import random , numpy as jnp , grad , vmap , tree_map


A = jnp.array([[1, -1], [-1, 1]])
def utility(x, key):
    return jnp.dot(x, jnp.dot(A, x))
def replace(lst, index, value):
    return lst[:index] + [value] + lst[index+1:]

def mix(x, eps):
    return (1 - eps) * x.max() + eps * x.sum()

@dataclass
class BestResponseEnsembles:
    util_fn: Callable # utility function
    size: int # ensemble size
    init_fn: Callable # strategy profile initialization function
    eps: float = .5

    def init_params(self, key):
        x_key, w_key = random.split(key)
        x = self.init_fn(x_key)
        w = vmap(self.init_fn)(random.split(w_key, self.size))
        return x, w # profile and ensembles

    def get_profile_params(self, params):
        x, w = params
        return x

    def grads(self, params, key):
        u = partial(self.util_fn, key=key)

        def exploit_fn(x, w, fn):
            return sum(
                fn(vmap(lambda yi: u(replace(x, i, yi)))(ens))
                for i, ens in enumerate(w)
            ) - u(x).sum()

        x, w = params
        gx = grad(exploit_fn, 0)(x, w, jnp.sum)
        gw = tree_map(grad(exploit_fn, 1), w, jnp.sum)
        return gx, gw



import jax.random as random
import jax.experimental#.optimizers as optimiser
from jax.example_libraries import optimizers

# Initialize BestResponseEnsembles object
best_response_ensembles = BestResponseEnsembles(
    util_fn=utility,
    size=10,
    init_fn=lambda key: random.dirichlet(key, [2])
)

# Set up optimization loop
opt_init, opt_update, get_params = optimizers.adam(step_size=0.1)
opt_state = opt_init(best_response_ensembles.init_params(random.PRNGKey(0)))

for i in range(1000):
    # Compute gradients
    params = get_params(opt_state)
    gx, gw = best_response_ensembles.grads(params, random.PRNGKey(i))
    grads = gx, gw

    # Update optimizer state
    opt_state = opt_update(i, grads, opt_state)

    # Print current strategy profile
    if i % 100 == 0:
        print(best_response_ensembles.get_profile_params(get_params(opt_state)))