import torch
import numpy as np
import matplotlib.pyplot as plt


class CircleGame(torch.nn.Module):
    def __init__(self, n_players):
        super().__init__()
        self.n_players = n_players
        self.action_dim = 1
        self.action_space = torch.linspace(-np.pi, np.pi, 100)
        self.register_parameter('x', torch.nn.Parameter(torch.randn(n_players, 2)))
        self.register_parameter('log_s', torch.nn.Parameter(torch.randn(n_players)))
        
    def get_strategy(self):
        mus = torch.atan2(self.x[:, 1], self.x[:, 0])
        sigmas = torch.exp(self.log_s)
        strategies = torch.zeros(self.n_players, self.action_dim)
        for i in range(self.n_players):
            strategies[i] = torch.distributions.von_mises.VonMises(mus[i], sigmas[i]).sample().requires_grad_()
        return strategies

    def dist(self, a, b):
        diff = torch.clamp(torch.abs(a-b), 0, np.pi)/2
        return 2*torch.sin(diff)

        
    def forward(self, actions,i):
        rewards = self.dist(actions[i],actions[(i+1)%self.n_players])
        return rewards

    def init_actions(self, n_ensembles):
        actions = torch.zeros((n_ensembles, self.n_players, self.action_dim))
        for i in range(n_ensembles):
            actions[i] = self.get_strategy()
        return actions


def mix(strategy, epsilon):
    return (1 - epsilon) * strategy.max() + epsilon * strategy.sum()


def concater(strategies, action_samples,i,j):
    return torch.cat((strategies[:i], action_samples[j][i].unsqueeze(0),strategies[i+1:]),dim=0)

    
def train(game,n_iter=1000, lr=1e-3, eps=1e-3, n_ensembles=500):
    strategies = game.get_strategy().requires_grad_()
    action_samples = game.init_actions(n_ensembles).requires_grad_()
    optimizer_strat = torch.optim.Adam([strategies], lr=lr)
    optimizer_action = torch.optim.Adam([action_samples], lr=lr)
    iter_exploitabilities = []
    for _ in range(n_iter):
        optimizer_action.zero_grad()
        optimizer_strat.zero_grad()
        reward_strategy = torch.zeros(game.n_players)
        mix_strategy = torch.zeros(game.n_players)
        max_strategy = torch.zeros(game.n_players)
        for i in range(game.n_players):
            ensemble_reward = torch.zeros(n_ensembles)
            reward_strategy[i] = game.forward(strategies,i).requires_grad_().to(device)
            for j in range(n_ensembles):
                tempTensor = concater(strategies,action_samples,i,j).requires_grad_().to(device)
                ensemble_reward[j] = game.forward(tempTensor,i).requires_grad_().to(device)
            max_strategy[i] = torch.max(ensemble_reward.detach()).to(device)
            mix_strategy[i] = mix(ensemble_reward, eps).requires_grad_().to(device)
        loss_max = torch.sum(torch.abs(max_strategy - reward_strategy))
        loss_mix = torch.sum(torch.abs(mix_strategy - reward_strategy.detach()))
        loss_max.backward()
        loss_mix.backward()
        optimizer_strat.step()
        optimizer_action.step()
        iter_exploitabilities.append([loss_max.item(),loss_mix.item()])
        print(f"iter: {_:4d}, loss_max: {loss_max.item():.4f}, loss_mix: {loss_mix.item():.4f},strategies: {strategies.detach().numpy()}")
    return strategies, iter_exploitabilities



torch.manual_seed(0)
np.random.seed(0)

n_iter = 10000
lr = 0.05
n_ensembles = 50
eps = 0.5
players = 100
       
device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")
game = CircleGame(n_players=players).to(device)
strategies, exploitabilities = train(game, n_iter=n_iter, lr=lr, eps =eps, n_ensembles=n_ensembles)

# print strategies
print(f"strategies: {strategies.detach().numpy()}")

max_loss = [x[0] for x in exploitabilities]
mix_loss = [x[1] for x in exploitabilities]


plt.figure(figsize=(10, 5))


plt.subplot(1, 2, 1)
plt.title("Exploitability Max Loss")
plt.xlabel("Epoch")
plt.ylabel("Loss")
plt.plot(max_loss)



plt.subplot(1, 2, 2)
plt.title("Mix Loss")
plt.xlabel("Epoch")
plt.ylabel("Loss")
plt.plot(mix_loss)

name = f"circleGame {n_iter} {players} {n_ensembles} {lr} {eps}".replace(".", "_")
plt.savefig(f"Results/{name}.png")

